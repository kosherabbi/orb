archetype room(oracle_address: address)

constant orb_address : address = @KT1VSEeZZ5SiKeUGmEf7Drh4tRinNzEUBEJg
// constant oracle_address: address = @KT1HyswzE8Krz9PsMWEkfkJaUATrki8izjg7
constant admin : address = @tz1W8RgHPiTDPqB5bGommn4QgJwMFuT3B1QF
constant bet_price : nat = 1

// Storage -----------------------------------------  

asset player identified by id {
    id : address;
    score: nat = 0;
    entry_block: nat;
    room_id : string;
}

asset result identified by idh {
    idh : address;
    scoreh: nat;
}   

asset leaderboard identified by player_id {
    player_id : address;
    total_score: nat = 0;
}

asset room identified by cid {
    cid : string;
    finish_block  : nat = 0;
    bet_amount : tez;
    size: nat;
    distance: nat;
    total_bank: tez = 0tz;
}

asset server {
    sid: string;
    manager: address;
    server_url: string = "";
    rooms: aggregate<room> = [];
    players: aggregate<player> = [];
}   

// Entries -----------------------------------------

entry create_server (serverd : string, manag : address, room_idx : string, serverurl : string,  bet_size : tez, size_v: nat, game_duration_v: nat) {
    var total_bank_sum : tez = size_v*bet_size;
    room.add({cid =room_idx; bet_amount = bet_size; size = size_v; distance = game_duration_v; total_bank = total_bank_sum});
    server.add({sid=serverd; manager = manag; server_url = serverurl;rooms=[]});
    server[serverd].rooms.add(room_idx);
}

entry enter_room (room_idv : string, serverid: string) {
    called by any
    require {
        r1: transferred = room[room_idv].bet_amount otherwise "INCORRECT_BET_AMOUNT";
        r2: server[serverid].rooms.contains(room_idv) otherwise "ROOM_NOT_FOUND";
        r3: server[serverid].players.count() < room[room_idv].size otherwise "ROOM_IS_FULL" ;
    }
    effect {
        player.add({ id = caller; entry_block = level; room_id = room_idv});
        server[serverid].players.add(caller);
        if server[serverid].players.count() = room[room_idv].size then room[room_idv].finish_block := level + room[room_idv].distance
    }
}

entry refund (room_idq : string, server_id : string) {
    called by any
    require {
        r4: server[server_id].players.contains(caller) otherwise "NOTHING_TO_REFUND";
        r5: room[room_idq].finish_block = 0 otherwise "NO_REFUND_AFTER_START"
    }
    effect {
        server[server_id].players.remove(caller);
        player.remove(caller);
        if (not server[server_id].players.contains(caller)) then transfer (bet_price * 1tz) to caller;
    }
}

entry clear_all () {
    called by admin
    effect {
        server.remove_all();
        room.remove_all();
        player.remove_all();
        result.remove_all();
    }
}

entry remove_room (room_idn : string, server_idn : string) {
    called by server[server_idn].manager
    effect {
        server[server_idn].rooms.remove(room_idn);
        room.remove(room_idn);
    }
}

entry destroy_server (server_idx : string) {
    called by admin
    effect {
        server.remove(server_idx);    
    }
}

entry end_game (room_idb : string, serverid : string, packed_outcome : bytes, signed_outcome : signature) {
    require {
        r7: server.contains(serverid) otherwise "WRONG_SERVER";
        r8: server[serverid].players.contains(caller) otherwise "NOT_PARTICIPATED";
        r9: server[serverid].rooms.contains(room_idb) otherwise "NO_ROOM_ON_THIS_SERVER";
        r10: level > room[room_idb].finish_block otherwise "GAME_STILL_ACTIVE";
    }
    effect {
        var sortido : list <address> = [];
        var bank = room[room_idb].total_bank;

        match call_view<list<address * nat>>(oracle_address, "getlist", (packed_outcome, signed_outcome)) with
            | some(res) -> 
              for item in res do
                result.add({idh = item[0];scoreh = item[1]});
                leaderboard.add_update(item[0], { total_score += item[1] });
              done
            | none -> fail("FAILED_TO_CALL_VIEW")
        end;        
        
        sortido := result.sort(desc(scoreh)).head(3);

        iter i from 1 to 3 do  
          var par :nat = int_to_nat(i-1) ? the : 0;
          match sortido.nth(par) with
          | some(n) -> transfer ((42% / i) * bank) to n
          | none -> fail ("EMPTY_LIST")
          end;
        done;
        transfer (3% * bank) to caller;
        transfer (10% * bank) to server[serverid].manager;
        transfer (10% * bank) to admin;
        server[serverid].players.remove_all();
        player.remove_all();
        result.remove_all();
        sortido := [];
        if server[serverid].players.count() = 0 then room[room_idb].finish_block := 0
    }
}
